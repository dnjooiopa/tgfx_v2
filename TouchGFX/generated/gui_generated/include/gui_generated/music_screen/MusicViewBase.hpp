/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MUSICVIEWBASE_HPP
#define MUSICVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/music_screen/MusicPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>

class MusicViewBase : public touchgfx::View<MusicPresenter>
{
public:
    MusicViewBase();
    virtual ~MusicViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void controlPlay()
    {
        // Override and implement this function in Music
    }

    virtual void controlStop()
    {
        // Override and implement this function in Music
    }

    virtual void controlPrev()
    {
        // Override and implement this function in Music
    }

    virtual void controlNext()
    {
        // Override and implement this function in Music
    }

    virtual void controlVolumeDown()
    {
        // Override and implement this function in Music
    }

    virtual void controlVolumeUp()
    {
        // Override and implement this function in Music
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box s1_box_1;
    touchgfx::ButtonWithLabel buttonWithLabel1;
    touchgfx::TextAreaWithOneWildcard MusicTextArea;
    touchgfx::ButtonWithIcon Play;
    touchgfx::ButtonWithIcon Prev;
    touchgfx::ButtonWithIcon Next;
    touchgfx::ButtonWithIcon Stop;
    touchgfx::ButtonWithIcon VolDown;
    touchgfx::ButtonWithIcon VolUp;
    touchgfx::ButtonWithIcon Pause;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MUSICTEXTAREA_SIZE = 17;
    touchgfx::Unicode::UnicodeChar MusicTextAreaBuffer[MUSICTEXTAREA_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MusicViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MUSICVIEWBASE_HPP
